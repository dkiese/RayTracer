#include "RayTracer.h"

RayTracer::RayTracer(Scene * s, int maxd, int sm){
  scene = s;
  maxdepth = maxd;
  samples = sm;
}

// This function determines the closest object that a ray intersects.
// The getIntersection() method is polymorphic. Please provide implementations
// for all the objects in your scene (see Object.h and Object.cpp).
Object * RayTracer::intersect(Ray r){
  scene->startIteration();
  Object * current = NULL;
  Object * minObject = NULL;
  Point inter;
  //Initialize min to infinite point;
  Point min = Point::Infinite();
  while((current = scene->getNextObject()) != NULL){
    inter = current->getIntersection(r);
    if((inter - r.p).length() > 1E-6){
      if((inter-r.p).length()  < (min-r.p).length()){
        min = inter;
        minObject = current;
      }
    }
  }
  return minObject;
}


Color RayTracer::Shade(Point normal,Point p, Ray r, Material * m, Object * o, int depth){
	return Color (0.0,0.0,0.0,0.0);
}

// Trace a ray recursively
Color RayTracer::trace(Ray r, int depth){
	Color rad = Color(0.0,0.0,0.0,1.0);

	if(depth > maxdepth)
		return rad;
	//nearest object
	Object * o = intersect(r);
	//if an object exists
	if(o != NULL)
	{
		// nearest intersection point, normal at the point
		Point p = o->getIntersection(r);
		Point n = o->getNormal(p);

		//if there is no intersection
		if(p.x == 1E20 || p.length() < 0 )
			return Color(0.0,0.0,0.0,1.0);
		else
		{
			// determining the material
			Material * m = o->getMaterial();
		
			if(m->type == REFLECTIVE && m->type == DIFFUSE)
			{
				Ray rray = r.reflect(n,p);	
				rad = rad + trace(rray, depth+1);
			}
			else if(m->type == REFLECTIVE)
			{
				Ray rray = r.reflect(n,p);	
				rad = rad + trace(rray, depth+1) + Phong(n,p,r,m,o);;
			}
			else if(m->type == DIFFUSE)
			{
				rad = rad + Phong(n,p,r,m,o);
			}
			/*else
			{
				rad = rad + Phong(n,p,r,m,o);
			}*/
		

		}
	}
	
	
	return rad;

}

// Local Phong illumination at a point.
Color RayTracer::Phong(Point normal,Point p, Ray r, Material * m, Object * o){
  Color ret = Color(0.0,0.0,0.0,1.0);
  
  // YOUR CODE HERE.
  // There is ambient lighting irrespective of shadow.
  // Specular-diffuse lighting only if the point is not in shadow
  
  // Remember, you need to account for all the light sources.

	// calculate Ambient
	Color Ambient = m->getAmbient(p);
	Color Specular;
	Color Diffuse;


	for(int i = 0; i < scene->lights.size(); i++)
	{
		// calculate diffuse
		normal.normalize();
		Point L = scene->lights[i]-p;
		L.normalize();
		double DL = (L*normal);
		if(DL >= 0)
			DL = DL;
		else
			DL = 0;
		Diffuse = Diffuse + m->getDiffuse(p) * DL;
		Point V = r.v*-1;
		V.normalize();	
		Point R = normal*(normal*L)*2-L;	
		double Sx = (R*V);
		if(Sx >= 0)
			Sx = Sx;
		else
			Sx = 0;
		Specular = Specular + m->getSpecular(p)*Sx;

		// create a ray to light from original object
		Ray lightray = Ray(p, scene->lights[i]-p);
		// find nearest object
		Object * No = intersect(lightray);
		// there is no object by the light ray 
		if(No == NULL)
			ret = ret + Specular + Ambient + Diffuse;
		// if there is an object
		else
		{
			// calculating the intersection
			Point hit = No->getIntersection(lightray);
			// if we hit something
			if(hit.x != 1E20)
			{
				// make a shadowray
				Ray shadowray = Ray(p, hit-p); 
				// if its a light source
				if(No->isLightSource())
				{
					ret = ret + Diffuse;
				}
				// not a light source
				else
				{
					// distance from original object to new object is smaller than distance form original object to the light source
					if(shadowray.v < lightray.v)
					{
						ret = ret + Specular + Ambient;
						// produces a shadow
					}
					else
					{
						// no shadow produced
					}
				}
			}
		}
		
		
	}
	
	return ret;
}

// This function generates point on the image plane and starts a trace 
// through them.
// Grid supersampling is also implemented.
Color RayTracer::calculate(int x, int y){
  Color c = Color(0.0,0.0,0.0,0.0);
  for(int i = 1; i <= samples; i++){
    for(int j = 1; j <= samples; j++){
      double one, two;
      // We subtract 0.5 so that the (u,v)-origin is at the
      //center of the image plane.
      one = double(x)-0.5+double(i)/double(samples);
      two = double(y)-0.5+double(j)/double(samples);
      Ray r = scene->makeRay(one,two);
      c = c+trace(r,0);
    }
  }
  c = c*(1.0/double(samples*samples));
  return c;
}

